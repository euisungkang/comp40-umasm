# Calling Convention
# r0 is zero
# r1 is return address
# r2 is stack pointer
# r3, r4 are non-volatile
# r5 is stack length (non-v)
# r6, r7 are temps

.section init
.zero r0
.temps r6, r7

.section text

waiting:
        # r4 = input char
        r4 := input()

        # Complement of EOF is 0
        if (r4 == -1) goto end_program using r3

        goto jump_to_table

entering:
        # r4 = input char
        r4 := input()

        # Complement of EOF is 0
        if (r4 == -1) goto end_program using r3

        # if char is not a digit, jump to appropriate command in table
        if (r4 <s '0') goto jump_to_table using r3
        if (r4 >s '9') goto jump_to_table using r3

        # if a digit follows after another digit, it is a multi-digit number
        goto double_digit

input_error:
        output "Unkown Character: "
        output r4
        goto waiting

operand_error:
        output "Invalid Operands\n"
        goto waiting

check1:
        if (r2 == value_stack_bottom) goto stack_underflow1_value_0 using r4
        goto r1

check2:
        if (r2 == value_stack_bottom) goto stack_underflow2_value_0 using r4

        pop r4 off stack r2
        if (r2 == value_stack_bottom) goto stack_underflow2_value_1 using r3
        push r4 on stack r2

        goto r1

stack_underflow2_value_0:
        output "Stack underflow---expected at least 2 elements\n"
        goto waiting

stack_underflow2_value_1:
        push r4 on stack r2
        output "Stack underflow---expected at least 2 elements\n"
        goto waiting

stack_underflow1_value_0:
        output "Stack underflow---expected at least 1 element\n"
        goto waiting

digit:
        # r4 is most recent input char, r3 = numeric value
        r3 := r4 - '0'

        push r3 on stack r2
        r5 := r5 + 1

        goto entering

double_digit:
        pop r3 off stack r2

        # multiplying 10 gives r3 enough space to add an extra digit
        r3 := r3 * 10
        r3 := r3 + r4
        r3 := r3 - '0'

        push r3 on stack r2
        goto entering

add:
        # To add, we need two numbers
        goto check2 linking r1

        # Add two numbers on top of the stack
        pop r3 off stack r2
        pop r4 off stack r2
        r3 := r3 + r4
        push r3 on stack r2

        # Two numbers became one, so length--
        r5 := r5 - 1

        .temps r6, r7
        goto waiting

subtract:
        # To subtract, we need two numbers
        goto check2 linking r1

        # Sub two numbers on top of stack
        pop r3 off stack r2
        pop r4 off stack r2
        r3 := r4 - r3
        push r3 on stack r2

        r5 := r5 - 1

        .temps r6, r7
        goto waiting

multiply:
        # To multiply, we need two numbers
        goto check2 linking r1

        # Multiply two numbers on top of stack
        pop r3 off stack r2
        pop r4 off stack r2
        r3 := r3 * r4
        push r3 on stack r2

        r5 := r5 - 1

        .temps r6, r7
        goto waiting

divide:
        # To divide, we need num and denom
        goto check2 linking r1

        pop r3 off stack r2
        pop r4 off stack r2

        # Case 1: Division by zero should be an error
        if (r3 == 0) goto div_zero 

        push r5 on stack r2

        # Case 2: Numerator and denominator negatives are handled separately.
        if (r4 <s 0) goto neg_num using r5
        if (r3 <s 0) goto neg_denom using r5

        pop r5 off stack r2

        r4 := r4 / r3
        push r4 on stack r2
        r5 := r5 - 1

        .temps r6, r7
        goto waiting

        div_zero:
                output "Division by zero\n"

                # Save nonvolatiles
                push r4 on stack r2
                push r3 on stack r2
                goto waiting

        neg_num:
                pop r5 off stack r2

                # Case 3: If both numerator and denominator are negative
                if (r3 <s 0) goto both_neg using r1

                # r4 is the negative numerator
                r4 := -r4
                r4 := r4 / r3
                r4 := -r4
                push r4 on stack r2

                r5 := r5 - 1

                .temps r6, r7
                goto waiting

        neg_denom:
                pop r5 off stack r2

                # r3 is the negative denominator
                r3 := -r3
                r4 := r4 / r3
                r4 := -r4
                push r4 on stack r2

                r5 := r5 - 1

                .temps r6, r7
                goto waiting

        both_neg:
                # both r3 and r4 are negative.
                r3 := -r3
                r4 := -r4
                r4 := r4 / r3
                push r4 on stack r2

                r5 := r5 - 1

                .temps r6, r7
                goto waiting

BITOR:
        # | operator requires two arguments
        goto check2 linking r1

        pop r3 off stack r2
        pop r4 off stack r2
        r3 := r3 | r4
        push r3 on stack r2

        r5 := r5 - 1

        .temps r6, r7
        goto waiting

BITAND:
        # & operator requires two arguments
        goto check2 linking r1

        pop r3 off stack r2
        pop r4 off stack r2
        r3 := r3 & r4
        push r3 on stack r2

        r5 := r5 - 1

        .temps r6, r7
        goto waiting

BITNOT:
        # ~ operator requires one argument
        goto check1 linking r1

        pop r3 off stack r2
        r3 := ~r3
        push r3 on stack r2

        .temps r6, r7
        goto waiting

negative:
        # negating requires one argument
        goto check1 linking r1

        # We can switch to negative by adding -
        pop r3 off stack r2
        r3 := -r3
        push r3 on stack r2

        .temps r6, r7
        goto waiting

swap:
        # swapping requires two arguments
        goto check2 linking r1

        # pop and push at reversed order
        pop r3 off stack r2
        pop r4 off stack r2
        push r3 on stack r2
        push r4 on stack r2

        .temps r6, r7
        goto waiting

duplicate:
        # duplicating requires one argument
        goto check1 linking r1

        # push the same value twice to duplicate
        pop r3 off stack r2
        push r3 on stack r2
        push r3 on stack r2

        r5 := r5 + 1

        .temps r6, r7
        goto waiting

pop_stack:
        # popping from stack requires at least one value in stack
        goto check1 linking r1

        pop stack r2
        r5 := r5 - 1

        .temps r6, r7
        goto waiting

clear:
        # loop through entire stack, deleting it
        if (r5 == 0) goto clear_temps_waiting
        pop stack r2
        r5 := r5 - 1
        goto clear

end_program:
        halt

jump_to_table:
        # Goto location given in jumptable
        r3 := jumptable + r4

        r3 := m[r0][r3]

        goto r3

# only difference to waiting is this clears all temps
clear_temps_waiting:
        .temps r6, r7
        goto waiting